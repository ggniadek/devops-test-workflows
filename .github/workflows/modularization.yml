name: Notebook

on:
  push:
    branches: [ "main" ]

jobs:
  check-notebook-files:
    runs-on: ubuntu-latest
    name: Check for modified .ipynb files
    outputs:
      contains_ipynb: ${{ steps.check-notebook-files.outputs.any_changed }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get modified notebook files
        id: check-notebook-files
        uses: tj-actions/changed-files@v45
        with:
          files: "**/*.ipynb"

      - name: List modified notebook files
        env:
          IPYNB_FILES: "${{ steps.check-notebook-files.outputs.all_changed_files }}"
        run: |
          if [ -n "$IPYNB_FILES" ]; then
            echo "Changed .ipynb files:"
            for file in $IPYNB_FILES; do
              echo "$file was changed"
            done
          else
            echo "No notebook files were changed/added in the last commit."
          fi
          
      - name: Save modified notebook files
        run: |
          echo -e "${{ steps.check-notebook-files.outputs.all_changed_files }}" | tr ' ' '\n' > modified_notebooks.txt
          cat modified_notebooks.txt  # Debugging output
          
      - name: Upload modified_notebooks.txt
        uses: actions/upload-artifact@v4
        with:
          name: ipynb-files
          path: modified_notebooks.txt
          
  splitting-ipynb-files:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    name: Split notebooks into separate Python files
    needs: check-notebook-files # To make sure prev job finished before it starts
    steps:
      - uses: actions/checkout@v4
      
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: ipynb-files
          path: ./
          
      - name: Verify artifact content
        run: cat modified_notebooks.txt
        
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.12'
          
      - name: Install dependencies
        run: pip install -r modularization/requirements.txt 
        
  # Splits notebook into cells and saves each cell as a separate python file
      - name: Run modularization Python script
        run: python modularization/notebook_splitter.py

      # Log into AWS
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: eu-central-1
          role-to-assume: arn:aws:iam::314146339425:role/ModularizationGithubActions
          role-session-name: ModularizationSession

      - name: Run S3 upload Python script
        run: python modularization/s3_uploader.py
        
